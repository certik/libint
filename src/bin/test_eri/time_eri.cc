
#include <iostream>
#include <sstream>
#include <stdlib.h>
#include <math.h>

#include <libint2_config.h>
#include <libint2.h>
#include <test_eri/prep_libint2.h>
// generated by test_eri.pl
#include <test_eri_conf.h>

using namespace std;

namespace {
  std::string usage();
  std::string am2label(unsigned int);
};

int main(int argc, char** argv)
{
  typedef unsigned int uint;

  if (argc != 2) {
    cerr << usage() << endl;
    exit(1);
  }

  uint niter = atoi(argv[1]);

  const uint veclen = LIBINT2_MAX_VECLEN;
  double alpha[4] = {0.5, 1.0, 1.5, 2.0};
  double A[3] = {1.0, 2.0, 3.0};
  double B[3] = {1.5, 2.5, 3.5};
  double C[3] = {4.0, 2.0, 0.0};
  double D[3] = {3.0, 3.0, 1.0};

  const double ratio = 1.5;
  std::vector<double> alpha1;
  std::vector<double> alpha2;
  std::vector<double> alpha3;
  std::vector<double> alpha4;
  for(uint v=0; v<veclen; v++) {
    const double scale = pow(ratio,static_cast<double>(v));
    alpha1.push_back(alpha[0]*scale);
    alpha2.push_back(alpha[1]*scale);
    alpha3.push_back(alpha[2]*scale);
    alpha4.push_back(alpha[3]*scale);
  }
  
  Libint_t* libint = new Libint_t;
  const int max_am = max(max(am[0],am[1]),max(am[2],am[3]));
  LIBINT2_PREFIXED_NAME(libint2_init_eri)(libint,max_am,0);
  prep_libint2(libint,am[0],alpha1,A,
	       am[1],alpha2,B,
	       am[2],alpha3,C,
	       am[3],alpha4,D,0,veclen);
  libint->nflops = 0;
  
  cout << "Computing (" << am2label(am[0]) << am2label(am[1])
       << "|" << am2label(am[2]) << am2label(am[3]) << ") " << niter << " times" << endl;

  for(int iter=0; iter<niter; iter++)
    COMPUTE_XX_ERI_XX(libint);
  
  cout << "nflops = " << libint->nflops << endl;

  LIBINT2_PREFIXED_NAME(libint2_cleanup_eri)(libint);

  exit(0);
}

namespace {
  std::string
  usage()
  {
    ostringstream oss;
    oss << "Usage: time_eri <niter>" << endl;
    oss << "       niter -- number of iterations" << endl;
    return oss.str();
  }
  
  std::string
  am2label(unsigned int l) {
    static char labels[] = "spdfghiklmoqrtuvwxyz";
    std::ostringstream oss;
    oss << labels[l];
    return oss.str();
  }
};

